#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;pthread.h&gt;
#include &lt;unistd.h&gt;
void *print_message(void *thread_id) {
long tid = (long) thread_id; // Get thread ID
printf(&quot;Thread %ld: Hello from thread!\n&quot;, tid);
sleep(1);
pthread_exit(NULL);
}
int main() {
int num_threads = 5; 
pthread_t threads[num_threads];
for (long i = 0; i &lt; num_threads; i++) {
printf(&quot;Main: Creating thread %ld\n&quot;, i);
int rc = pthread_create(&amp;threads[i], NULL, print_message, (void *) i);
if (rc) {
printf(&quot;Error: Unable to create thread %ld, return code: %d\n&quot;, i, rc);
exit(EXIT_FAILURE);
}
}
for (int i = 0; i &lt; num_threads; i++) {
pthread_join(threads[i], NULL);
}
printf(&quot;Main: All threads completed.\n&quot;);
return 0;
}
