#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#define MAX_FILES 10
typedef struct {
int start_block;
int length;
} File;
int main() {
int disk_size, block_size, num_blocks;
int num_files = 0;
File files[MAX_FILES];
int *disk; 
printf(&quot;Enter total disk size (in KB): &quot;);
scanf(&quot;%d&quot;, &amp;disk_size);
printf(&quot;Enter block size (in KB): &quot;);
scanf(&quot;%d&quot;, &amp;block_size);
num_blocks = disk_size / block_size;
disk = (int *)calloc(num_blocks, sizeof(int)); 
printf(&quot;\nDisk has %d blocks.\n&quot;, num_blocks);
while (1) {
int choice;
printf(&quot;\n1. Allocate File\n2. View Disk Allocation\n3. Exit\nEnter your choice: &quot;);
scanf(&quot;%d&quot;, &amp;choice);
if (choice == 1) { // File Allocation
if (num_files &gt;= MAX_FILES) {
printf(&quot;\nCannot allocate more files. Limit reached.\n&quot;);
continue;
}
int start, length, found = 0;
printf(&quot;\nEnter starting block and file length: &quot;);
scanf(&quot;%d %d&quot;, &amp;start, &amp;length);
if (start &lt; 0 || start + length &gt; num_blocks) {
printf(&quot;\nError: File does not fit in disk.\n&quot;);
continue;
}
for (int i = start; i &lt; start + length; i++) {
if (disk[i] == 1) {
found = 1;
break;
}
}
if (found) {
printf(&quot;\nError: Blocks already occupied.\n&quot;);
} else {
for (int i = start; i &lt; start + length; i++) {
disk[i] = 1;
}
files[num_files].start_block = start;
files[num_files].length = length;
num_files++;
printf(&quot;\nFile allocated successfully.\n&quot;);
}
}
else if (choice == 2) { 
printf(&quot;\nDisk Allocation:\n&quot;);
for (int i = 0; i &lt; num_blocks; i++) {
printf(&quot;%d &quot;, disk[i]);
}
printf(&quot;\n&quot;);
printf(&quot;\nFile Table:\n&quot;);
printf(&quot;File No. | Start Block | Length\n&quot;);
for (int i = 0; i &lt; num_files; i++) {
printf(&quot;%d | %d | %d\n&quot;, i + 1, files[i].start_block, files[i].length);
}
}
else if (choice == 3) { // Exit
free(disk);
printf(&quot;\nExiting program.\n&quot;);
break;
}
else {
printf(&quot;\nInvalid choice! Try again.\n&quot;);
}
}
return 0;
}
