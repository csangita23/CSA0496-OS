#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/wait.h&gt; 
#define BUFFER_SIZE 100
int main() {
int pipefd[2]; 
pid_t pid;
char buffer[BUFFER_SIZE];
if (pipe(pipefd) == -1) {
perror(&quot;pipe&quot;);
exit(EXIT_FAILURE);
}
pid = fork();
if (pid == -1) {
perror(&quot;fork&quot;);
exit(EXIT_FAILURE);
}
if (pid == 0) { 
close(pipefd[1]);
read(pipefd[0], buffer, BUFFER_SIZE);
printf(&quot;Child process received: %s\n&quot;, buffer);
close(pipefd[0]); 
exit(EXIT_SUCCESS);
} else { // Parent process
close(pipefd[0]); 
const char *message = &quot;Hello from the parent process!&quot;;
write(pipefd[1], message, strlen(message) + 1); 
close(pipefd[1]); 
wait(NULL); 
exit(EXIT_SUCCESS);
}
}
